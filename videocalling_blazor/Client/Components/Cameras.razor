@using videocalling_blazor.Client.Interop;
@using videocalling_blazor.Shared;
@using Microsoft.AspNetCore.Components;
@using Microsoft.JSInterop;
@using System.Threading.Tasks;

@if (totaldevice > 1)
{
    <div class="dropdown">

        <button class="btn btn-lg btn-secondary dropdown-toggle twilio-btn-red w-100"
                type="button" id="dropdownMenuButton"
                data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            <span>@(IsLoading ? "Loading cameras..." : "Select Camera")</span>
            @if (IsLoading)
            {
                <span id="loading" class="spinner-border spinner-border-sm"
                      role="status" aria-hidden="true"></span>
            }
        </button>
        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
            @if (HasDevices)
            {
                foreach (var device in Devices!)
                {
                    <a href="#" class="dropdown-item @(_activeCamera == device.DeviceId ? "active" : "")"
                       id="@device.DeviceId"
                       @onclick="@(async () => await SelectCamera(device.DeviceId,device.Label))">
                        @device.Label
                    </a>
                }
            }
        </div>
    </div>
}
else
{
    <div class="dropdown">

        <button class="btn btn-lg btn-secondary dropdown-toggle twilio-btn-red w-100"
                type="button" id="dropdownSingleMenuButton"
                 aria-haspopup="false" aria-expanded="false">
            <span>@_activeCameraName</span>
        </button>
    </div>
}


@code {

    [Inject]
    protected IJSRuntime? JavaScript { get; set; }

    [Parameter]
    public EventCallback<string> CameraChanged { get; set; }

    protected Device[]? Devices { get; private set; }
    protected CameraState State { get; private set; }
    protected bool HasDevices => State == CameraState.FoundCameras;
    protected bool IsLoading => State == CameraState.LoadingCameras;

    string? _activeCamera;
    int? totaldevice = 0;
    string? _activeCameraName;

    protected override async Task OnInitializedAsync()
    {
        //_isloader = true;
        Devices = await JavaScript.GetVideoDevicesAsync();
        State = Devices != null && Devices.Length > 0
                ? CameraState.FoundCameras
                : CameraState.Error;

        totaldevice = Devices.Length;
        if (totaldevice >0)
        {
            await SelectCamera(Devices[0].DeviceId, Devices[0].Label);
        }

    }

    protected async ValueTask SelectCamera(string deviceId,string  cameraLabel)
    {
        await JavaScript.StartVideoAsync(deviceId, "#camera");
        _activeCamera = deviceId;
        _activeCameraName = cameraLabel;

        if (CameraChanged.HasDelegate)
        {
            await CameraChanged.InvokeAsync(_activeCamera);
        }
    }

}
